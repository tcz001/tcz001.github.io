;; Analyzed by ClojureScript 0.0-2511
{:defs {Pub {:protocol-symbol true, :name cljs.core.async/Pub, :file "out/cljs/core/async.cljs", :end-column 18, :column 1, :line 580, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 580, :impls #{cljs.core.async/t22034 cljs.core.async/t22158}}, reduce {:protocol-inline nil, :name cljs.core.async/reduce, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([f init ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 364, :end-line 364, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, remove> {:protocol-inline nil, :name cljs.core.async/remove>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([p ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20631, :variadic false, :max-fixed-arity 2}), :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel."}, timeout {:protocol-inline nil, :name cljs.core.async/timeout, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([msecs]), :protocol-impl nil, :column 1, :methods ({:tag #{nil cljs.core.async.impl.channels/ManyToManyChannel clj-nil}, :variadic false, :max-fixed-arity 1}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, unsub* {:protocol-inline nil, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([p v ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 580, :end-line 582, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch]))}, admix* {:protocol-inline nil, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([m ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 471, :end-line 472, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch]))}, unmix* {:protocol-inline nil, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([m ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 471, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch]))}, t20631 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20631, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20610 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20610, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 197, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t22034 {:num-fields 7, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22034, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 612, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat* {:protocol-inline nil, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :method-params ([f in out]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 288, :end-line 288, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out]))}, mix {:protocol-inline nil, :name cljs.core.async/mix, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([out]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t21893, :variadic false, :max-fixed-arity 1}), :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, ->t20628 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20628, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch p filter> meta20629]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20628, :variadic false, :max-fixed-arity 4}), :line 241, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch p filter> meta20629])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t20616 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20616, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map< meta20617]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20616, :variadic false, :max-fixed-arity 4}), :line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map< meta20617])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pub {:protocol-inline nil, :name cljs.core.async/pub, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t22034, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async/t22158, :variadic false, :max-fixed-arity 3}), :line 585, :end-line 585, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source."}, take {:protocol-inline nil, :name cljs.core.async/take, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 723, :end-line 723, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}, unsub-all* {:protocol-inline nil, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([p] [p v]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 580, :end-line 583, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p] [p v]))}, <! {:protocol-inline nil, :name cljs.core.async/<!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([port]), :protocol-impl nil, :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available."}, ->t20622 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20622, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map> meta20623]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20622, :variadic false, :max-fixed-arity 4}), :line 223, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map> meta20623])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20616 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20616, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 197, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map {:protocol-inline nil, :name cljs.core.async/map, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 661, :end-line 661, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied"}, Mux {:protocol-symbol true, :name cljs.core.async/Mux, :file "out/cljs/core/async.cljs", :end-column 18, :column 1, :line 404, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 404, :impls #{cljs.core.async/t21303 cljs.core.async/t22034 cljs.core.async/t21517 cljs.core.async/t21784 cljs.core.async/t22158 cljs.core.async/t21893}}, t20597 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20597, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 131, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat> {:protocol-inline nil, :name cljs.core.async/mapcat>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 313, :end-line 313, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f out] [f out buf-or-n])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes."}, ->t20591 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20591, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([flag alt-flag meta20592]), :protocol-impl nil, :anonymous true, :column 5, :factory :positional, :methods ({:tag cljs.core.async/t20591, :variadic false, :max-fixed-arity 3}), :line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag alt-flag meta20592])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t22158 {:protocol-inline nil, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22158, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ensure-mult mults buf-fn topic-fn ch pub meta22159]), :protocol-impl nil, :anonymous true, :column 14, :factory :positional, :methods ({:tag cljs.core.async/t22158, :variadic false, :max-fixed-arity 7}), :line 612, :max-fixed-arity 7, :fn-var true, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta22159])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t21893 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t21893, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 523, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20613 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20613, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, buffer {:protocol-inline nil, :name cljs.core.async/buffer, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, close! {:protocol-inline nil, :name cljs.core.async/close!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([port]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port]))}, t20591 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20591, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 123, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t20625 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20625, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map> meta20626]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20625, :variadic false, :max-fixed-arity 4}), :line 223, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map> meta20626])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, chan {:protocol-inline nil, :name cljs.core.async/chan, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([] [buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [buf-or-n])), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size."}, solo-mode* {:protocol-inline nil, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([m mode]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 471, :end-line 476, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode]))}, tap {:protocol-inline nil, :name cljs.core.async/tap, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :line 454, :end-line 454, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, ->t20631 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20631, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch p filter> meta20632]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20631, :variadic false, :max-fixed-arity 4}), :line 241, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch p filter> meta20632])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, admix {:protocol-inline nil, :name cljs.core.async/admix, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([mix ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 547, :end-line 547, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, unique {:protocol-inline nil, :name cljs.core.async/unique, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 742, :end-line 742, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch] [ch buf-or-n])), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}, muxch* {:protocol-inline nil, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([_]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 404, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_]))}, solo-mode {:protocol-inline nil, :name cljs.core.async/solo-mode, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([mix mode]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 574, :end-line 574, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, onto-chan {:protocol-inline nil, :name cljs.core.async/onto-chan, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 378, :end-line 378, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied."}, to-chan {:protocol-inline nil, :name cljs.core.async/to-chan, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 395, :end-line 395, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, dropping-buffer {:protocol-inline nil, :name cljs.core.async/dropping-buffer, :variadic false, :file "out/cljs/core/async.cljs", :end-column 23, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, untap-all {:protocol-inline nil, :name cljs.core.async/untap-all, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([mult]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 467, :end-line 467, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, into {:protocol-inline nil, :name cljs.core.async/into, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([coll ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 715, :end-line 715, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, ->t21303 {:protocol-inline nil, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t21303, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cs ch mult meta21304]), :protocol-impl nil, :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t21303, :variadic false, :max-fixed-arity 4}), :line 424, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cs ch mult meta21304])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20594 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20594, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 123, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub {:protocol-inline nil, :name cljs.core.async/sub, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([p topic ch] [p topic ch close?]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3} {:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :line 640, :end-line 640, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, t20581 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20581, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t21784 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t21784, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 523, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-flag {:protocol-inline nil, :private true, :name cljs.core.async/alt-flag, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20594, :variadic false, :max-fixed-arity 0}), :line 121, :end-line 121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->t20610 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20610, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map< meta20611]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20610, :variadic false, :max-fixed-arity 4}), :line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map< meta20611])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map> {:protocol-inline nil, :name cljs.core.async/map>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([f ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20625, :variadic false, :max-fixed-arity 2}), :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel."}, t20622 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20622, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 223, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t21893 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t21893, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta21894]), :protocol-impl nil, :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t21893, :variadic false, :max-fixed-arity 11}), :line 523, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta21894])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipe {:protocol-inline nil, :name cljs.core.async/pipe, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([from to] [from to close?]), :protocol-impl nil, :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists (quote ([from to] [from to close?])), :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the\n  from channel closes, but can be determined by the close?\n  parameter."}, ->t22034 {:protocol-inline nil, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22034, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ensure-mult mults buf-fn topic-fn ch pub meta22035]), :protocol-impl nil, :anonymous true, :column 14, :factory :positional, :methods ({:tag cljs.core.async/t22034, :variadic false, :max-fixed-arity 7}), :line 612, :max-fixed-arity 7, :fn-var true, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta22035])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t22158 {:num-fields 7, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22158, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 612, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unmix {:protocol-inline nil, :name cljs.core.async/unmix, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([mix ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 552, :end-line 552, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix"}, filter< {:protocol-inline nil, :name cljs.core.async/filter<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 261, :end-line 261, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes."}, t20578 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20578, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub* {:protocol-inline nil, :protocol cljs.core.async/Pub, :name cljs.core.async/sub*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 9, :method-params ([p v ch close?]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 4}), :line 580, :end-line 581, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p v ch close?]))}, remove< {:protocol-inline nil, :name cljs.core.async/remove<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 279, :end-line 279, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes."}, ->t20597 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20597, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cb flag alt-handler meta20598]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20597, :variadic false, :max-fixed-arity 4}), :line 131, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cb flag alt-handler meta20598])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, untap* {:protocol-inline nil, :protocol cljs.core.async/Mult, :name cljs.core.async/untap*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([m ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 407, :end-line 409, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch]))}, toggle {:protocol-inline nil, :name cljs.core.async/toggle, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([mix state-map]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 562, :end-line 562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state."}, untap-all* {:protocol-inline nil, :protocol cljs.core.async/Mult, :name cljs.core.async/untap-all*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([m]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 407, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, ->t20600 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20600, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cb flag alt-handler meta20601]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20600, :variadic false, :max-fixed-arity 4}), :line 131, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cb flag alt-handler meta20601])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sliding-buffer {:protocol-inline nil, :name cljs.core.async/sliding-buffer, :variadic false, :file "out/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred)."}, partition {:protocol-inline nil, :name cljs.core.async/partition, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 762, :end-line 762, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given"}, ->t20594 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20594, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([flag alt-flag meta20595]), :protocol-impl nil, :anonymous true, :column 5, :factory :positional, :methods ({:tag cljs.core.async/t20594, :variadic false, :max-fixed-arity 3}), :line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag alt-flag meta20595])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, Mult {:protocol-symbol true, :name cljs.core.async/Mult, :file "out/cljs/core/async.cljs", :end-column 19, :column 1, :line 407, :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :info nil, :end-line 407, :impls #{cljs.core.async/t21303 cljs.core.async/t21517}}, merge {:protocol-inline nil, :name cljs.core.async/merge, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([chs] [chs buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 697, :end-line 697, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chs] [chs buf-or-n])), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed."}, partition-by {:protocol-inline nil, :name cljs.core.async/partition-by, :variadic false, :file "out/cljs/core/async.cljs", :end-column 20, :method-params ([f ch] [f ch buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 788, :end-line 788, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f ch] [f ch buf-or-n])), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given"}, unsub-all {:protocol-inline nil, :name cljs.core.async/unsub-all, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([p] [p topic]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 653, :end-line 653, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p] [p topic])), :doc "Unsubscribes all channels from a pub, or a topic of a pub"}, >! {:protocol-inline nil, :name cljs.core.async/>!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([port val]), :protocol-impl nil, :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available."}, ->t20613 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20613, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([fn1 _ meta20611 map< f ch meta20614]), :protocol-impl nil, :anonymous true, :column 10, :factory :positional, :methods ({:tag cljs.core.async/t20613, :variadic false, :max-fixed-arity 7}), :line 205, :max-fixed-arity 7, :fn-var true, :arglists (quote ([fn1 _ meta20611 map< f ch meta20614])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20600 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20600, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 131, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unmix-all* {:protocol-inline nil, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix-all*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([m]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 471, :end-line 474, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, ->t21517 {:protocol-inline nil, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t21517, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cs ch mult meta21518]), :protocol-impl nil, :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t21517, :variadic false, :max-fixed-arity 4}), :line 424, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cs ch mult meta21518])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20628 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20628, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, nop {:protocol-inline nil, :private true, :name cljs.core.async/nop, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 79, :end-line 79, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, split {:protocol-inline nil, :name cljs.core.async/split, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2} {:tag cljs.core/IVector, :variadic false, :max-fixed-arity 4}), :line 343, :end-line 343, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed."}, unmix-all {:protocol-inline nil, :name cljs.core.async/unmix-all, :variadic false, :file "out/cljs/core/async.cljs", :end-column 17, :method-params ([mix]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 557, :end-line 557, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mix])), :doc "removes all inputs from the mix"}, filter> {:protocol-inline nil, :name cljs.core.async/filter>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([p ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20631, :variadic false, :max-fixed-arity 2}), :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel."}, tap* {:protocol-inline nil, :protocol cljs.core.async/Mult, :name cljs.core.async/tap*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 9, :method-params ([m ch close?]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 407, :end-line 408, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m ch close?]))}, untap {:protocol-inline nil, :name cljs.core.async/untap, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([mult ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 462, :end-line 462, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult"}, alt-handler {:protocol-inline nil, :private true, :name cljs.core.async/alt-handler, :variadic false, :file "out/cljs/core/async.cljs", :end-column 20, :method-params ([flag cb]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20600, :variadic false, :max-fixed-arity 2}), :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flag cb]))}, alts! {:protocol-inline nil, :name cljs.core.async/alts!, :variadic true, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([ports p__20605]), :protocol-impl nil, :column 1, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 1}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ports & {:as opts}])), :doc "Completes at most one of several channel operations. Must be called\n  inside a (go ...) block. ports is a vector of channel endpoints, which\n  can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and nil for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects."}, ->t20578 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20578, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([f fn-handler meta20579]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20578, :variadic false, :max-fixed-arity 3}), :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f fn-handler meta20579])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unsub {:protocol-inline nil, :name cljs.core.async/unsub, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([p topic ch]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 648, :end-line 648, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub"}, map< {:protocol-inline nil, :name cljs.core.async/map<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([f ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20616, :variadic false, :max-fixed-arity 2}), :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel"}, fn-handler {:protocol-inline nil, :private true, :name cljs.core.async/fn-handler, :variadic false, :file "out/cljs/core/async.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t20581, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, do-alts {:protocol-inline nil, :name cljs.core.async/do-alts, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([fret ports opts]), :protocol-impl nil, :column 1, :methods ({:tag #{cljs.core.async.impl.channels/t18288 clj-nil}, :variadic false, :max-fixed-arity 3}), :line 138, :end-line 138, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued"}, t21517 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t21517, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 424, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, random-array {:protocol-inline nil, :private true, :name cljs.core.async/random-array, :variadic false, :file "out/cljs/core/async.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->t20581 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20581, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([f fn-handler meta20582]), :protocol-impl nil, :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t20581, :variadic false, :max-fixed-arity 3}), :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f fn-handler meta20582])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, Mix {:protocol-symbol true, :name cljs.core.async/Mix, :file "out/cljs/core/async.cljs", :end-column 18, :column 1, :line 471, :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :info nil, :end-line 471, :impls #{cljs.core.async/t21784 cljs.core.async/t21893}}, toggle* {:protocol-inline nil, :protocol cljs.core.async/Mix, :name cljs.core.async/toggle*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([m state-map]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 471, :end-line 475, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m state-map]))}, mult {:protocol-inline nil, :name cljs.core.async/mult, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([ch]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async/t21517, :variadic false, :max-fixed-arity 1}), :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  If a tap put throws an exception, it will be removed from the mult."}, mapcat< {:protocol-inline nil, :name cljs.core.async/mapcat<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([f in] [f in buf-or-n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 298, :end-line 298, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in] [f in buf-or-n])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes."}, t21303 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t21303, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 424, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unblocking-buffer? {:protocol-inline nil, :name cljs.core.async/unblocking-buffer?, :variadic false, :file "out/cljs/core/async.cljs", :end-column 26, :method-params ([buff]), :protocol-impl nil, :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. "}, ->t21784 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t21784, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta21785]), :protocol-impl nil, :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t21784, :variadic false, :max-fixed-arity 11}), :line 523, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta21785])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20625 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20625, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 223, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, put! {:protocol-inline nil, :name cljs.core.async/put!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :protocol-impl nil, :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag clj-nil, :variadic false, :max-fixed-arity 3} {:tag clj-nil, :variadic false, :max-fixed-arity 4}), :line 87, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists (quote ([port val] [port val fn0] [port val fn0 on-caller?])), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil."}, take! {:protocol-inline nil, :name cljs.core.async/take!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([port fn1] [port fn1 on-caller?]), :protocol-impl nil, :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2} {:tag clj-nil, :variadic false, :max-fixed-arity 3}), :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists (quote ([port fn1] [port fn1 on-caller?])), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil."}, ->t20619 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t20619, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([fn1 _ meta20617 map< f ch meta20620]), :protocol-impl nil, :anonymous true, :column 10, :factory :positional, :methods ({:tag cljs.core.async/t20619, :variadic false, :max-fixed-arity 7}), :line 205, :max-fixed-arity 7, :fn-var true, :arglists (quote ([fn1 _ meta20617 map< f ch meta20620])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t20619 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t20619, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :imports nil, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :uses nil, :excludes #{reduce take map into partition merge partition-by}, :doc nil, :name cljs.core.async}