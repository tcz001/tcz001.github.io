;; Analyzed by ClojureScript 0.0-2511
{:defs {RingBuffer {:num-fields 4, :protocols #{cljs.core.async.impl.buffers/Object}, :name cljs.core.async.impl.buffers/RingBuffer, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 21, :type true, :column 10, :line 23, :record false, :end-line 23, :skip-protocol-flag nil}, ->DroppingBuffer {:protocol-inline nil, :protocols #{cljs.core/ICounted cljs.core.async.impl.protocols/UnblockingBuffer cljs.core.async.impl.protocols/Buffer}, :name cljs.core.async.impl.buffers/->DroppingBuffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 25, :method-params ([buf n]), :protocol-impl nil, :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 2}), :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([buf n])), :skip-protocol-flag #{cljs.core/ICounted}}, dropping-buffer {:protocol-inline nil, :name cljs.core.async.impl.buffers/dropping-buffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 23, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 1}), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, fixed-buffer {:protocol-inline nil, :name cljs.core.async.impl.buffers/fixed-buffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 1}), :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->FixedBuffer {:protocol-inline nil, :protocols #{cljs.core/ICounted cljs.core.async.impl.protocols/Buffer}, :name cljs.core.async.impl.buffers/->FixedBuffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 22, :method-params ([buf n]), :protocol-impl nil, :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 2}), :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([buf n])), :skip-protocol-flag #{cljs.core/ICounted}}, SlidingBuffer {:num-fields 2, :protocols #{cljs.core/ICounted cljs.core.async.impl.protocols/UnblockingBuffer cljs.core.async.impl.protocols/Buffer}, :name cljs.core.async.impl.buffers/SlidingBuffer, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 24, :type true, :column 10, :line 113, :record false, :end-line 113, :skip-protocol-flag #{cljs.core/ICounted}}, ring-buffer {:protocol-inline nil, :name cljs.core.async.impl.buffers/ring-buffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 19, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/RingBuffer, :variadic false, :max-fixed-arity 1}), :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, sliding-buffer {:protocol-inline nil, :name cljs.core.async.impl.buffers/sliding-buffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :column 1, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 1}), :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->RingBuffer {:protocol-inline nil, :protocols #{cljs.core.async.impl.buffers/Object}, :name cljs.core.async.impl.buffers/->RingBuffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 21, :method-params ([head tail length arr]), :protocol-impl nil, :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.buffers/RingBuffer, :variadic false, :max-fixed-arity 4}), :line 23, :end-line 23, :max-fixed-arity 4, :fn-var true, :arglists (quote ([head tail length arr])), :skip-protocol-flag nil}, FixedBuffer {:num-fields 2, :protocols #{cljs.core/ICounted cljs.core.async.impl.protocols/Buffer}, :name cljs.core.async.impl.buffers/FixedBuffer, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 22, :type true, :column 10, :line 80, :record false, :end-line 80, :skip-protocol-flag #{cljs.core/ICounted}}, acopy {:protocol-inline nil, :name cljs.core.async.impl.buffers/acopy, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 13, :method-params ([src src-start dest dest-start len]), :protocol-impl nil, :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 5}), :line 15, :end-line 15, :max-fixed-arity 5, :fn-var true, :arglists (quote ([src src-start dest dest-start len]))}, ->SlidingBuffer {:protocol-inline nil, :protocols #{cljs.core/ICounted cljs.core.async.impl.protocols/UnblockingBuffer cljs.core.async.impl.protocols/Buffer}, :name cljs.core.async.impl.buffers/->SlidingBuffer, :variadic false, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 24, :method-params ([buf n]), :protocol-impl nil, :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 2}), :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([buf n])), :skip-protocol-flag #{cljs.core/ICounted}}, DroppingBuffer {:num-fields 2, :protocols #{cljs.core/ICounted cljs.core.async.impl.protocols/UnblockingBuffer cljs.core.async.impl.protocols/Buffer}, :name cljs.core.async.impl.buffers/DroppingBuffer, :file "out/cljs/core/async/impl/buffers.cljs", :end-column 25, :type true, :column 10, :line 96, :record false, :end-line 96, :skip-protocol-flag #{cljs.core/ICounted}}}, :imports nil, :require-macros nil, :use-macros nil, :requires {cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :uses nil, :excludes #{}, :doc nil, :name cljs.core.async.impl.buffers}