;; Analyzed by ClojureScript 0.0-2511
{:defs {remove! {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/remove!, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 12, :method-params ([b]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, close! {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/Channel, :name cljs.core.async.impl.protocols/close!, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 11, :method-params ([chan]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chan]))}, Handler {:protocol-symbol true, :name cljs.core.async.impl.protocols/Handler, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 22, :column 1, :line 22, :protocol-info {:methods {active? [[h]], commit [[h]]}}, :info nil, :end-line 22, :impls #{}}, active? {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/Handler, :name cljs.core.async.impl.protocols/active?, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 12, :method-params ([h]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h]))}, Buffer {:protocol-symbol true, :name cljs.core.async.impl.protocols/Buffer, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 21, :column 1, :line 27, :protocol-info {:methods {full? [[b]], remove! [[b]], add! [[b itm]]}}, :info nil, :end-line 27, :impls #{}}, full? {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/full?, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 10, :method-params ([b]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, add! {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/add!, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 9, :method-params ([b itm]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 27, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b itm]))}, ReadPort {:protocol-symbol true, :name cljs.core.async.impl.protocols/ReadPort, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 23, :column 1, :line 13, :protocol-info {:methods {take! [[port fn1-handler]]}}, :info nil, :end-line 13, :impls #{}}, Channel {:protocol-symbol true, :name cljs.core.async.impl.protocols/Channel, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 22, :column 1, :line 19, :protocol-info {:methods {close! [[chan]]}}, :info nil, :end-line 19, :impls #{}}, UnblockingBuffer {:protocol-symbol true, :name cljs.core.async.impl.protocols/UnblockingBuffer, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 31, :column 1, :line 33, :protocol-info {:methods {}}, :info nil, :end-line 33, :impls #{}}, MAX-QUEUE-SIZE {:file "out/cljs/core/async/impl/protocols.cljs", :line 11, :column 1, :end-line 11, :end-column 29, :const true, :name cljs.core.async.impl.protocols/MAX-QUEUE-SIZE}, commit {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/Handler, :name cljs.core.async.impl.protocols/commit, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 11, :method-params ([h]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h]))}, put! {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/WritePort, :name cljs.core.async.impl.protocols/put!, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 9, :method-params ([port val fn0-handler]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 16, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([port val fn0-handler]))}, take! {:protocol-inline nil, :protocol cljs.core.async.impl.protocols/ReadPort, :name cljs.core.async.impl.protocols/take!, :variadic false, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 10, :method-params ([port fn1-handler]), :protocol-impl nil, :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 13, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port fn1-handler]))}, WritePort {:protocol-symbol true, :name cljs.core.async.impl.protocols/WritePort, :file "out/cljs/core/async/impl/protocols.cljs", :end-column 24, :column 1, :line 16, :protocol-info {:methods {put! [[port val fn0-handler]]}}, :info nil, :end-line 16, :impls #{}}}, :imports nil, :require-macros nil, :use-macros nil, :requires nil, :uses nil, :excludes #{}, :doc nil, :name cljs.core.async.impl.protocols}